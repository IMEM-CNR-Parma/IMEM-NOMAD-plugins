import numpy as np
from nomad.datamodel.metainfo.basesections import (
    Measurement,
    MeasurementResult,
)
from nomad.metainfo import SchemaPackage, Quantity, SubSection, MEnum, Datetime, Section
from nomad.datamodel.data import EntryData
from nomad.config import config

from nomad.datamodel.metainfo.annotations import (
    ELNAnnotation,
    ELNComponentEnum,
)
from imem_nomad_plugin.general.schema import (
    IMEMCategory,
    SubstratePreparationStep,
)

configuration = config.get_plugin_entry_point(
    'imem_nomad_plugin.characterization:characterization_schema'
)

m_package = SchemaPackage()


class AFMresults(MeasurementResult):
    """
    The results of an AFM measurement
    """

    roughness = Quantity(
        type=np.float64,
        description='RMS roughness value obtained by AFM',
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='nanometer',
        ),
        unit='meter',
    )
    # surface_features = Quantity(
    #     type=MEnum(["Step Flow", "Step Bunching", "2D Island"]),
    #     a_eln={"component": "EnumEditQuantity"},
    # )
    surface_features = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    scale = Quantity(
        type=np.float64,
        description='scale of the image, to be multiplied by 5 to know the image size',
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='nanometer',
        ),
        unit='meter',
    )
    image = Quantity(
        type=str,
        description='image showing the thickness measurement points',
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )


class AFMmeasurement(Measurement, SubstratePreparationStep, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={'hide': ['steps']},
        categories=[IMEMCategory],
        label='AFM',
    )

    method = Quantity(
        type=str,
        default='AFM (IMEM MOVPE)',
    )
    description = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={'component': 'DateTimeEditQuantity'},
    )
    results = SubSection(
        section_def=AFMresults,
        repeats=True,
    )


class OMresults(MeasurementResult):
    """
    The results of a Optical Microscope measurement
    """

    image = Quantity(
        type=str,
        shape=['*'],
        description='image showing the thickness measurement points',
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )


class OpticalMicroscope(Measurement, SubstratePreparationStep, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={'hide': ['steps']},
        categories=[IMEMCategory],
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={'component': 'DateTimeEditQuantity'},
    )
    results = SubSection(
        section_def=OMresults,
        repeats=True,
    )


class SEMMeasurement(Measurement, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    method = Quantity(
        type=str,
        default='SEM (MOVPE CNR)',
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={'component': 'StringEditQuantity', 'label': 'Notes'},
    )
    image = Quantity(
        type=str,
        description='image from SEM measurement',
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
        shape=['*'],
    )
    sample_id = Quantity(
        type=str,
        a_tabular={'name': 'AFMReflectanceSEM/Sample'},
        a_eln={'component': 'StringEditQuantity'},
    )
    datetime = Quantity(
        type=Datetime,
        a_tabular={'name': 'AFMReflectanceSEM/Date'},
        a_eln={'component': 'DateTimeEditQuantity'},
    )
    surface_state = Quantity(
        type=str,
        a_tabular={'name': 'AFMReflectanceSEM/Surface State'},
        a_eln={'component': 'StringEditQuantity'},
    )


class ReflectanceResults(MeasurementResult):
    """
    The results of a Reflectance measurement
    """

    thickness = Quantity(
        type=np.float64,
        description='Thickness from Reflectance',
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='nanometer',
        ),
        unit='meter',
    )
    growth_rate = Quantity(
        type=np.float64,
        description='Growth rate calculated',
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='cm/min',
        ),
        unit='meter / second',
    )
    image = Quantity(
        type=str,
        description='image showing the thickness',
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
    )


class ReflectanceMeasurement(Measurement, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
    )
    method = Quantity(
        type=str,
        default='Reflectance (MOVPE CNR)',
    )
    results = SubSection(
        section_def=ReflectanceResults,
        repeats=True,
    )


class UVAbsorbanceMeasurement(Measurement, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln=None,
        label_quantity='sample_id',
    )
    method = Quantity(
        type=str,
        default='Absorbance (MOVPE CNR)',
    )
    description = Quantity(
        type=str,
        description='Notes and comments.',
        a_eln={'component': 'StringEditQuantity', 'label': 'Notes'},
    )
    image = Quantity(
        type=str,
        description='image from optical microscopy',
        a_browser={'adaptor': 'RawFileAdaptor'},
        a_eln={'component': 'FileEditQuantity'},
        shape=['*'],
    )
    sample_id = Quantity(
        type=str,
        a_eln={'component': 'StringEditQuantity'},
    )
    datetime = Quantity(
        type=Datetime,
        a_eln={'component': 'DateTimeEditQuantity'},
    )
    energy_gap = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'eV'},
        unit='eV',
    )
    abs_coefficient = Quantity(
        type=np.float64,
        description='FILL',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': '1 / cm'},
        unit='1 / cm',
    )
    thickness = Quantity(
        type=np.float64,
        description='Thickness from ABS',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'nanometer'},
        unit='nanometer',
    )


class HallResults(MeasurementResult):
    """Container for variable hall temperature data"""

    m_def = Section(
        a_eln=dict(lane_width='600px'),
        a_plot=[
            {
                'label': 'Carrier density',
                'x': 'temperature',
                'y': 'carrier_density',
                'layout': {'yaxis': {'type': 'lin'}},
                'lines': [{'mode': 'markers'}],
            },
            {
                'label': 'Hall coefficient',
                'x': 'temperature',
                'y': 'hall_coefficient',
                'layout': {'yaxis': {'type': 'lin'}},
                'lines': [{'mode': 'markers'}],
            },
            {
                'label': 'Hall mobility',
                'x': 'temperature',
                'y': 'hall_mobility',
                'layout': {'yaxis': {'type': 'lin'}},
                'lines': [{'mode': 'markers'}],
            },
            {
                'label': 'Resistivity',
                'x': 'temperature',
                'y': 'resistivity',
                'layout': {'yaxis': {'type': 'lin'}},
                'lines': [{'mode': 'markers'}],
            },
        ],
    )

    carrier_density = Quantity(
        type=np.dtype(np.float64),
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='1 / centimeter ** 3',
        ),
        unit='1 / meter ** 3',
        description='The measured carrier density.',
    )
    field = Quantity(
        type=np.dtype(np.float64),
        unit='T',
        description='The magnetic field steps of the experiment.',
    )
    hall_coefficient = Quantity(
        type=np.dtype(np.float64),
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='centimeter ** 3 / coulomb',
        ),
        unit='meter ** 3 / coulomb',
        description='The measured hall coefficients.',
    )
    hall_mobility = Quantity(
        type=np.dtype(np.float64),
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='centimeter ** 2 / volt / second',
        ),
        unit='meter ** 2 / volt / second',
        description='The measured hall mobilities.',
    )
    resistivity = Quantity(
        type=np.dtype(np.float64),
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='centimeter * ohm',
        ),
        unit='meter * ohm',
        description='The measured resistivity values.',
    )
    temperature = Quantity(
        type=np.dtype(np.float64),
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='celsius',
        ),
        unit='kelvin',
        description='The temperature steps of the experiment.',
    )
    zero_field_resistivity = Quantity(
        type=np.dtype(np.float64),
        a_eln=ELNAnnotation(
            component=ELNComponentEnum.NumberEditQuantity,
            defaultDisplayUnit='centimeter * ohm',
        ),
        unit='meter * ohm',
        description='The measured zero field resistivities.',
    )


class HallMeasurement(Measurement, EntryData):
    """
    A parser for hall measurement data
    """

    m_def = Section()
    data_file = Quantity(
        type=str,
        a_eln=dict(component='FileEditQuantity'),
        a_browser=dict(adaptor='RawFileAdaptor'),
    )
    tags = Quantity(
        type=str,
        shape=['*'],
        description='Add a tag that can be used for search.',
        a_eln=dict(component='StringEditQuantity'),
    )
    description = Quantity(
        type=str,
        description='description',
        a_eln=ELNAnnotation(
            component='StringEditQuantity',
            label='Notes',
        ),
    )

    results = SubSection(section_def=HallResults, repeats=True)
